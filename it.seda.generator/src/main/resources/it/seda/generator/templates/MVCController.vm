package #package;

import #ObjectCopier;
import #RowBoundsHelper;
import Form#Name;
import #OptionsUtil;
import #Model;
import #ModelService
import #DatagridTagPage;
import java.util.List;
import java.util.Map;
import javax.inject.Inject;
import javax.validation.Valid;
import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


@Controller
@RequestMapping(value="/#name")
public class #NameController {

	@Inject #NameService #nameService;
	private Logger logger = LoggerFactory.getLogger(#NameController.class);
	
	/*
	 * Method used to delete  #name by #id
	 */
	@RequestMapping(value="/{#id}", method=RequestMethod.DELETE) 
	public String delete#Name(@PathVariable String #id, 
			                  @RequestParam(value="pageNumber", defaultValue="#pageNumber")  int pageNumber, 
			                  @RequestParam(value="rowsPerPage",defaultValue="#rowsPerPage") int rowsPerPage,
			                  ModelMap model) {
    #nameService.delete#ModelName(#id);
	Form#Name form#Name=new Form#Name();
    form#Name.setEsito("form#Name.esito.cancel");
	refreshDatagrid(model, pageNumber, rowsPerPage);
	model.addAttribute("#nameData", #name);
	return "#name";
	}
	
	/*
	 * Method used to update  #name
	 */
	@RequestMapping(method=RequestMethod.PUT) 
	public String update#Name(
			               @Valid @ModelAttribute("#nameData") Form#Name form#Name,
			               BindingResult result,
			               @RequestParam(value="pageNumber", defaultValue="#pageNumber") int pageNumber, 
			               @RequestParam(value="rowsPerPage",defaultValue="#rowsPerPage") int rowsPerPage,
			               ModelMap model) {
    
		if (!result.hasErrors()) {
			logger.debug("#Name: dati inseriti correttamente"); //TODO i18n		
			try{	
				#ModelName #modelName =ObjectCopier.createObject(form#Name, #ModelName.class);
				#nameService.update#ModelName(#modelName);
				form#Name.setEsito("form#Name.esito.ok");
			}catch(Exception e){
				form#Name.setEsito("form#Name.esito.notOk");
				logger.error("Err",e); //TODO i18n errore inserimento
			}finally{
				model.addAttribute("form#Name",form#Name);
			}

		}
		refreshDatagrid(model, pageNumber, rowsPerPage);				
		return "#name";
	}
	
	/*
	 * Method used to edit #name given #id
	 */
	@RequestMapping(value="/{#id}", method=RequestMethod.GET) 
	public String edit#Name(@PathVariable String #id, 
			                  @RequestParam(value="pageNumber", defaultValue="#pageNumber") int pageNumber, 
			                  @RequestParam(value="rowsPerPage",defaultValue="#pageNumber") int rowsPerPage,
			                  @RequestParam(value="action",required=false) String action,
			                  ModelMap model) {
    #ModelName #modelName=#nameService.get#ModelNameBy#id(#id);
    Form#Name form#Name=new Form#Name();
    #foreach($field in $modelFields)
      form#Name.set$field(#modelName.get$field());
    #end
    model.addAttribute("#nameData",form#Name);
    model.addAttribute("action",action);
	refreshDatagrid(model, pageNumber, rowsPerPage);
	return "#name";
	}
			
	/*
	 * Give the requested page if the #id is not specified
	 */
	@RequestMapping(method = RequestMethod.GET)
	public String initForm(@RequestParam(value="pageNumber", defaultValue="#pageNumber") int pageNumber,
			               @RequestParam(value="rowsPerPage",defaultValue="#rowsPerPage") int rowsPerPage,
			               ModelMap model){
 
		Form#Name form#Name=new Form#Name();
		refreshDatagrid(model, pageNumber, rowsPerPage);
		model.addAttribute("#nameData", form#Name);
		return "#name";
	}

	/*
	 * Inserts a new #name
	 */
	@RequestMapping(method = RequestMethod.POST)
	public String add#Name(@Valid @ModelAttribute("#nameData") Form#Name form#Name, 
			BindingResult result, 
			ModelMap model,
			@RequestParam(value="pageNumber", defaultValue="#pageNumber") int pageNumber,
            @RequestParam(value="rowsPerPage",defaultValue="#rowsPerPage") int rowsPerPage) {
            
		if (!result.hasErrors()) {
			logger.debug("#Name: dati inseriti correttamente"); //TODO i18n		
			try{
			    #ModelName #modelName=ObjectCopier.createObject(form#Name, #ModelName.class);
				#nameService.insert#ModelName(#modelName);
				form#Name.setEsito("form#Name.esito.ok");
			}catch(Exception e){
				account.setEsito("form#Name.esito.notOk");
				logger.error("Err",e); //TODO i18n errore inserimento
			}finally{
				model.addAttribute("#nameData",form#Name);
			}
		}
		refreshDatagrid(model, pageNumber, rowsPerPage);
		return "#name";
	}
	
	/*
	 * Refresh datagrid
	 */
	protected void refreshDatagrid(ModelMap model, int pageNumber, int rowsPerPage) {	
		int totalRows=#nameService.list#ModelNameCount();
		RowBoundsHelper rbh = new RowBoundsHelper(rowsPerPage, pageNumber);
		List<#ModelName> ar=#nameService.lista#ModelName(rbh.buildRowBounds());	
		Page<#ModelName> #namePage = new Page<#ModelName>(ar);
		rbh.decorate(#namePage, totalRows);   
		model.addAttribute("pageNumber", pageNumber);
		model.addAttribute("rowsPerPage", rowsPerPage);
		model.addAttribute("#namePage", #namePage);
	}
}

