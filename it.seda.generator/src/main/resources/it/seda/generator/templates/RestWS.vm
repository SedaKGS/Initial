package  $restWS.getNamespace();


import $restWS.getForm().getClazz();
import $restWS.getModel().getClazz();
import $restWS.getService().getClazz();
import java.util.List;
import javax.inject.Inject;
import javax.validation.Valid;
import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import it.seda.ws.restfull.data.WebServiceOutput;
import it.seda.jdbc.utils.ObjectCopier;
import org.springframework.web.bind.annotation.RequestBody;


#set($ModelLower=$restWS.getModel().getLowerName())
#set($ModelUpper=$restWS.getModel().getUpperName())
#set($service=$restWS.getService().getName())
#set($nameService=$restWS.getService().getLowerName())
#set($class=".class")
#set($delete=".delete")
#set($FormUpper=$restWS.getForm().getName())
#set($FormLower=$restWS.getForm().getLowerName())
#set($Data="Data")
#set($Page="Page")
#set($Count="Count")
#set($ById="ById")
#set($setEsito=".setEsito")
#set($ByFilter="ByFilter")
#set($cancel=".cancel")
#set($esito=".esito")
#set($ok=".ok")
#set($notOk=".notOk")
#set($set=".set")
#set($get=".get")
#set($list=".list")
#set($insert=".insert")
#set($update=".update")
#set($fields=$restWS.getModel().getAttributes())
#set($pgNmb=$restWS.getPageNumber())
#set($rwspg=$restWS.getRowsPerPage())
#set($baseUrl=$restWS.getBaseUrl())
#set($listFields=$restWS.getForm().getListAttributes())
#set($dot=".")
#set($idUrl="")
#set($WS="WS")
#foreach($field in $fields)
#if($field.getPk()>0 && $field.isNotPkList())
     #set($idUrl=$idUrl+"/"+"{"+$field.getName()+"}")
#end
#end

@Controller
@RequestMapping(value="/$baseUrl")
public class $restWS.getName() {

    @Inject $service $nameService;
    private Logger logger = LoggerFactory.getLogger($restWS.getName()$class);
	
    /*
     * Method used to delete  $ModelUpper by primary key
    */
    @RequestMapping(value="$idUrl", 
                    method=RequestMethod.DELETE) 
    public WebServiceOutput deleteName(
#foreach($field in $fields)
#if($field.getPk()>0 && $field.isNotPkList())
                             @PathVariable $field.printType() $field.getName(),
#end
#end
                             @RequestParam(value="pageNumber", defaultValue="$pgNmb")  int pageNumber, 
                             @RequestParam(value="rowsPerPage",defaultValue="$rwspg") int rowsPerPage,
                             ModelMap model) {
			                   
    $ModelUpper $ModelLower=new $ModelUpper();
#foreach($field in $fields)
#if($field.getPk()>0 && $field.isNotPkList())
    $ModelLower$set$field.getNameUcase()($field.getName());
#end
#end			                   
    $nameService$delete$ModelUpper($ModelLower);
    
    WebServiceOutput  deleteOut = new WebServiceOutput ();
    deleteOut.setStatus("OK");
    deleteOut.setTotalPages(0);
	deleteOut.setTotalRows(0);
	deleteOut.setPageSize(15);
	deleteOut.setPageNumber(1);
    return deleteOut;
    }
	

    /*
     * Method used to update  $ModelUpper
    */
    @RequestMapping(value="$idUrl",method=RequestMethod.PUT) 
    public WebServiceOutput update$ModelUpper(
#foreach($field in $fields)
#if($field.getPk()>0 && $field.isNotPkList())
                                    @PathVariable $field.printType() $field.getName(),
#end
#end 
                                    @Valid @RequestBody $FormUpper $FormLower,
                                    BindingResult result,
                                    @RequestParam(value="pageNumber", defaultValue="$pgNmb") int pageNumber, 
                                    @RequestParam(value="rowsPerPage",defaultValue="$rwspg") int rowsPerPage,
                                    ModelMap model) {
                                    
      WebServiceOutput  updateOut = new WebServiceOutput ();
  
    updateOut.setTotalPages(0);
	updateOut.setTotalRows(0);
	updateOut.setPageSize(15);
	updateOut.setPageNumber(1);
    updateOut.setStatus("OK");                            
    
    if (!result.hasErrors()) {
    logger.debug("$restWS.getName(): dati inseriti correttamente"); //TODO i18n		
	try{	
#foreach($field in $fields)
#if($field.getPk()>0 && $field.isNotPkList())
         $FormLower$set$field.getNameUcase()($field.getName());
#end
#end 	
	
        $ModelUpper $ModelLower =ObjectCopier.createObject($FormLower, $ModelUpper$class);
        $nameService$update$ModelUpper($ModelLower);
        $FormLower$setEsito("$FormLower$esito$ok");
       
       }catch(Exception e){
        $FormLower$setEsito("$FormLower$esito$notOk");
        logger.error("Err",e); //TODO i18n errore inserimento
        updateOut.setStatus("KO");
       }finally{
        model.addAttribute("$FormLower",$FormLower);
       }
     }		
    return updateOut;  
     }
	

    /*
     * Method used to edit $ModelUpper given the primary key
    */
    @RequestMapping(value="$idUrl", 
                    method=RequestMethod.GET) 
    public WebServiceOutput edit$ModelUpper(
#foreach($field in $fields)
#if($field.getPk()>0 && $field.isNotPkList())
                            @PathVariable $field.printType() $field.getName(),
#end
#end 
                            @RequestParam(value="pageNumber", defaultValue="$pgNmb") int pageNumber, 
                            @RequestParam(value="rowsPerPage",defaultValue="$rwspg") int rowsPerPage,
                            @RequestParam(value="action",required=false) String action,
                            ModelMap model) {
     $ModelUpper $ModelLower=new $ModelUpper();
#foreach($field in $fields)
#if($field.getPk()>0 && $field.isNotPkList())
     $ModelLower$set$field.getNameUcase()($field.getName());
#end
#end	                         
  
     WebServiceOutput editOutput= $nameService$get$ModelUpper$ById$WS($ModelLower);
     return editOutput;
    }
	
			

	/*
	 * Inserts a new $ModelUpper
	 */
	@RequestMapping(method = RequestMethod.POST)
	public WebServiceOutput add$ModelUpper(@Valid@RequestBody $FormUpper $FormLower, 
                                 BindingResult result, 
                                 ModelMap model,
                                 @RequestParam(value="pageNumber", defaultValue="$pgNmb") int pageNumber,
                                 @RequestParam(value="rowsPerPage",defaultValue="$rwspg") int rowsPerPage) {
                                 
                                 
         WebServiceOutput  insertOut = new WebServiceOutput ();
  
    insertOut.setTotalPages(0);
	insertOut.setTotalRows(0);
	insertOut.setPageSize(15);
	insertOut.setPageNumber(1);
    insertOut.setStatus("OK");                                 
            
		if (!result.hasErrors()) {
			logger.debug("$restWS.getName(): dati inseriti correttamente"); //TODO i18n		
			try{
			    $ModelUpper $ModelLower=ObjectCopier.createObject($FormLower, $ModelUpper$class);
				$nameService$insert$ModelUpper($ModelLower);
				$FormLower$setEsito("$FormLower$esito$ok");
			}catch(Exception e){
				$FormLower$setEsito("$FormLower$esito$notOk");
				logger.error("Err",e); //TODO i18n errore inserimento
				 insertOut.setStatus("KO");     
			}finally{
				model.addAttribute("$FormLower",$FormLower);
			}
		}
	
		return insertOut;
	}
	
	
	
    /*
	 * Select by filter
	 */
	@RequestMapping(method = RequestMethod.GET)
	public WebServiceOutput list$ModelUpper(
#foreach($field in $fields)
#if($field.getForm()>0 && $field.isNotPkList())             
                                @RequestParam(value="$field.getName()") $field.printType() $field.getName(),
#end
#end 
                                 BindingResult result, 
                                 ModelMap model,
                                 @RequestParam(value="pageNumber", defaultValue="$pgNmb") int pageNumber,
                                 @RequestParam(value="rowsPerPage",defaultValue="$rwspg") int rowsPerPage) {
                                 
           $ModelUpper $ModelLower=new $ModelUpper();
#foreach($field in $fields)
#if($field.getForm()>0 && $field.isNotPkList())
     $ModelLower$set$field.getNameUcase()($field.getName());
#end
#end	                         
     
     RowBounds rb=new RowBounds(pageNumber,rowsPerPage);
     WebServiceOutput editOutput= $nameService$list$ModelUpper$ByFilter$WS($ModelLower, rb);
     return editOutput;                      

	}
  
	
	
		
		
		
}





